package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"github.com/gin-gonic/gin"
	"github.com/line/line-bot-sdk-go/v7/linebot"
)

var bot *linebot.Client

func main() {
	// Set Value
	const channelSecret = "Your_Secret_Channel"
	const channelToken = "Your_Access_Token"

	if channelSecret == "" || channelToken == "" {
		log.Fatalf("ERROR: Missing environment variables:\n LINE_CHANNEL_SECRET: %v\n LINE_CHANNEL_TOKEN: %v",
			channelSecret, channelToken)
	}

	var err error
	bot, err = linebot.New(channelSecret, channelToken)
	if err != nil {
		log.Fatalf("ERROR: Failed to initialize LINE Bot: %v", err)
	}

	r := gin.Default()

	//‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET /
	r.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "LINE Bot is running!"})
	})

	r.POST("/webhook", handleWebhook)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Println("Starting server on port:", port)
	err = r.Run(":" + port)
	if err != nil {
		log.Fatalf("ERROR: Failed to start server: %v", err)
	}
}

func handleWebhook(c *gin.Context) {
	events, err := bot.ParseRequest(c.Request)
	if err != nil {
		if err == linebot.ErrInvalidSignature {
			log.Println("ERROR: Invalid signature")
			c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid signature"})
		} else {
			log.Println("ERROR: Failed to parse request:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	for _, event := range events {
		if event.Type == linebot.EventTypeMessage {
			switch message := event.Message.(type) {
			case *linebot.TextMessage:
				handleTextMessage(event, message)
			}
		}
	}

	c.JSON(http.StatusOK, gin.H{"status": "ok"})
}

func handleTextMessage(event *linebot.Event, message *linebot.TextMessage) {
	replyToken := event.ReplyToken
	var err error
	responseText := ""

	switch message.Text {
	case "text":
		responseText = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ ChatBot ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"

	case "button":
		button := createButton()
		_, err = bot.ReplyMessage(replyToken, linebot.NewTemplateMessage("‡∏õ‡∏∏‡πà‡∏°", button)).Do()

	case "quickreply":
		quickReply := createQuickReply()
		message := linebot.NewTextMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞").WithQuickReplies(quickReply)
		_, err = bot.ReplyMessage(replyToken, message).Do()

	case "carousel":
		carousel := createCarousel()
		_, err = bot.ReplyMessage(replyToken, linebot.NewTemplateMessage("Carousel", carousel)).Do()

	default:
		responseText = fmt.Sprintf(" %s ", message.Text)
	}

	if responseText != "" {
		_, err = bot.ReplyMessage(replyToken, linebot.NewTextMessage(responseText)).Do()
	}

	if err != nil {
		log.Println("ERROR: Failed to send message:", err)
	}
}
func createButton() *linebot.ButtonsTemplate {
	return linebot.NewButtonsTemplate(
		"", "üîò ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏∏‡πà‡∏°", "üîπ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°",
		linebot.NewMessageAction("‚ú® ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ", "üéâ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°!"),
	)
}
func createQuickReply() *linebot.QuickReplyItems {
	return linebot.NewQuickReplyItems(
		linebot.NewQuickReplyButton("", linebot.NewMessageAction("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å A", "A")),
		linebot.NewQuickReplyButton("", linebot.NewMessageAction("üî• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å B", "B")),
	)
}
func createCarousel() *linebot.CarouselTemplate {
	return linebot.NewCarouselTemplate(
		linebot.NewCarouselColumn(
			"", "‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
			linebot.NewMessageAction("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô"),
		),
		linebot.NewCarouselColumn(
			"", "‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ IT", "‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏≠‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢!",
			linebot.NewMessageAction("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ IT", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ IT"),
		),
		linebot.NewCarouselColumn(
			"", "Gossip News!", "‡∏Ç‡πà‡∏≤‡∏ß‡∏ã‡∏∏‡∏ö‡∏ã‡∏¥‡∏ö ‡∏ß‡∏á‡πÉ‡∏ô‡∏î‡∏≤‡∏£‡∏≤ ‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤‡∏£‡πâ‡∏≠‡∏ô‡∏â‡πà‡∏≤",
			linebot.NewMessageAction("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gossip News!", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏ÅGossip News!"),
		),
	)
}
